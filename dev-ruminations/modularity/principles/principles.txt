Принципы модульности:

1. Программа, которую не получается начать и закончить условно "в один присест" (за один-два сеанса разработки) должна быть модульной.
2. Модульность подразумевает разделение программы на модули / сборку программы из модулей.
3. Модуль - это подпрограмма, выполняющая задачи, которые можно выделить в самостоятельный блок, хотя бы теоретически применимый не только в этой программе.
4. "чёрный ящик" (коробка) - принцип, согласно которому модуль является "непрозрачным" для программы и других модулей, его данные и логика поведения не "вытекают" наружу никак, кроме непосредственно возвращаемых предусмотренными интерфейсами значений. И сам он не воспринимает извне ничто, непосредственно в него не передававшееся.
5. Модули могут быть простыми и составными - собирающими подмодули.
6. Простой модуль не должен быть слишком мелким. Функция на пару строчек - это, скорее всего, неоправданно мелкая модульность ради модульности, кроме случая, когда этот модуль создан специально для упрощённого замещения на позиции другого - не столь миниатюрного.
7. Простой модуль не должен быть слишком большим. Однако это крайне субъективный момент оценки, и тут я могу лишь повториться формулировкой из первого принципа, заменив слово "программа" словом "модуль": модуль, который не получается начать и закончить за сеанс, должен быть составным.
8. Составной модуль, в идеале, не должен содержать логики помимо загрузки и сборки из загружаемых модулей рабочей сущности ("машины", "механизма") и экспорта результата.
9. Точка входа в программу (стартовый файл) - это, по сути, составной модуль, не обязанный что-либо экспортировать.
10. Составной модуль не должен непосредственно собирать больше определённого на уровне проекта количества подмодулей (например: не больше семи).
11. Модули могут быть специализированными (opinionated) и настраиваемыми (customizable), и, разумеется, возможен весь спектр между полной кастомизацией и полным отсутствием таковой.
12. Если программа может обойтись без какой-либо кастомизации модуля, то лучше ему её и не иметь - простота всегда дороже дополнительных возможностей. Исключения - те случаи, когда весь смысл существования программы / разработки модуля заключается именно в предложении данных вариантов или непосредственно завязан на них.
