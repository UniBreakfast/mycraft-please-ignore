Алгоритм создания для полноценного сервера, способного отдавать файлы фротэнда и обеспечивать его работу с данными.

1. Создаём index.js, в нём будет стартовый код, импортирующий/подключающий модули.
2. Первые кандидаты на вынесение в отдельные файлы-модули это: сервер (например на основе модуля http), функция-обработчик запросов, роутер (например если он в виде объекта или функции), функции обработки отдельных роутов, читалка файлов из папки фронтэнда (public или front), объект-словарь MIME-типов, различные функции для вычислений, классы, исходные структуры данных, 404.html.
3. Функция-обработчик запросов может дифференциировать запросы по свойствам .url и .method, что позволяет реализовать роутинг посредством "if / else if / else if / else", конструкции switch или даже объекта, где ключами будут url-ы (методы могут к ним конкатенироваться или быть ключами вложенных объектов).
4. Все запросы условно делятся на запросы файлов и API-запросы. В ответ на первые сервер будет отправлять содержимое соответствующих файлов из папки public или front, для чего эти файлы будет считываться с диска посредством модуля fs. Какой именно файл запрашивается, будет определяться свойством .url из запроса. Если запрошен отсутствующий файл, будет отдаваться специальная страница 404.html .
5. Создаём рядом папку public или front, в ней будут файлы фронтэнда (.html, .css, .js), организованные любым удобным образом.

  5.1. Создаём index.html, в нём будет весь HTML главной страницы.
  5.2. Стили задаём посредством CSS в отдельном файле index.css, подключаем его тэгом <link>.
  5.3. Поведение задаём посредством JavaScript в отдельном файле index.js, подключаем его посредством тэга <script>

  5.4. Другие странички делаются аналогично, но их файлы называются соответственно page_name.html, page_name.css и page_name.js и лежат рядом с index-файлами главной страницы.
    5.4.1. Файлы страниц можно сортировать: создав папку styles или css сложить в неё все файлы стилей, создав папку scripts или js сложить в неё все файлы JavaScript, можно даже для самих страниц создать папку pages или HTML и переложить файлы page_name.html в неё. Разумеется, ссылки, подключающие файлы, должны быть с учётом пути в папки.
    5.4.2. Файлы страниц можно соответственно группировать в подпапки в папке проекта, где каждая папка будет называться page_name, а файлы в ней могут именоваться как предложено выше или даже традиционно index.html, style.css и script.js.

  5.5. Файлы с другими ресурсами (картинки, звуки, видео и проч.) складываются в соответствующие папки рядом (images или по типам - JPG, PNG, SVG; audio или по типам...; video или по типам ...). В самых простых случаях - прямо в папке страницы, если у неё есть своя папка.

  5.6. Стили общие для всех страниц выносятся в файл common.css, который подключается на всех страницах. Кроме него на каждой странице как и прежде может также быть подключён файл со стилями специфичными для страницы. common.css лежит в корневой папке проекта или в случае из 4-А в папке styles или css.
  5.7. Переменные, функции и т.п. общие для всех страниц выносятся в файл common.js, который подключается на всех страницах. Кроме него на каждой странице как и прежжде может также быть подключён скрипт-файл с функциями специфичными для страницы. common.js лежит в корневой папке проекта или в случае из 4-А в папке scripts или js.

  5.8. Модули, библиотеки и компоненты неспецифичные для этого конкретного проекта но в нём используемые предлагается держать в папке meta-src и подключать аналогично общим файлам.
  5.9. Если это файлы более чем одного типа и/или они являются частями модулей/библиотек/компонентов, состоящих из более чем одного файла, то их стоит дополнительно сортировать в подпапки по типам или именам компонентов, желательно аналогично тому, как это сделано с общими файлами.

6. Остальные роуты отдают / принимают данные, загружая из / сохраняя в оперативной памяти и/или на диск / в базу данных посредством соответствующих модулей.
7. Файлы бэкэнда могут быть по-умолчанию в корне проекта или в специальной папке back или традиционно node_modules. Я считаю, что модули конкретного проекта, не устанавливавшиеся из npm, также имеют полное право дислоцироваться в этой папке, если решить проблему (не)публикации в github чуть более детализированным .gitignore .
  7.1. Между собой множество модулей может группироваться по папкам согласно области применения (например: routing, caching, logic, SSR, parsing и прочие) или находиться в одной папке и собираться в согласованно работающую машину уже на уровня кода.

8. Опубликовать такой проект можно на любом сервере-хостинге, поддерживающем NodeJS. Например на heroku.com.
